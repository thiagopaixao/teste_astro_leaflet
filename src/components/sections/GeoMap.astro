---
interface Props {
  title: string;
  content: string;
  latitude: number;
  longitude: number;
  zoom: number;
  geojson?: string;
  id: string;
  mapType: string;
}

const { title, content, latitude, longitude, zoom, geojson, id, mapType } = Astro.props;
---

<section class="relative w-full h-screen">
  <div class="absolute inset-0 z-10 bg-black bg-opacity-50 flex flex-col justify-center items-center text-white p-4">
    <h2 class="text-3xl font-bold mb-4">{title}</h2>
    <div class="prose max-w-none mb-4 text-white" set:html={content} />
  </div>
  <div id={id} class="absolute inset-0 geo-map" data-latitude={latitude} data-longitude={longitude} data-zoom={zoom} data-geojson={geojson} data-maptype={mapType}></div>
</section>

<style>
  .prose :global(*) {
    color: white;
  }
</style>

<script>
  import L from 'leaflet';
  import 'leaflet/dist/leaflet.css';

  function initMap() {
    const mapElements = document.querySelectorAll('.geo-map');
    mapElements.forEach((mapElement) => {
      if (!mapElement) return;

      const latitude = Number(mapElement.dataset.latitude);
      const longitude = Number(mapElement.dataset.longitude);
      const zoom = Number(mapElement.dataset.zoom);
      const geojsonString = mapElement.dataset.geojson;

      const map = L.map(mapElement.id, {
        zoomControl: false  // Desativa o controle de zoom padrão
      }).setView([latitude, longitude], zoom);

      const mapTypes = {
        map: {
          url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
          attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        },
        topology: {
          url: 'https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png',
          attribution: 'Map data: &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, <a href="http://viewfinderpanoramas.org">SRTM</a> | Map style: &copy; <a href="https://opentopomap.org">OpenTopoMap</a> (<a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA</a>)'
        },
        satellite: {
          url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',
          attribution: 'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'
        }
      };

      const mapType = mapElement.dataset.maptype || 'map';
      const selectedMapType = mapTypes[mapType];

      console.log(`Map ${mapElement.id} initialized with type: ${mapType}`);

      // Adiciona um controle de camadas para alternar entre os tipos de mapa
      // Cria todas as camadas
      const baseLayers = {
        "Mapa": L.tileLayer(mapTypes.map.url, { attribution: mapTypes.map.attribution }),
        "Topografia": L.tileLayer(mapTypes.topology.url, { attribution: mapTypes.topology.attribution }),
        "Satélite": L.tileLayer(mapTypes.satellite.url, { attribution: mapTypes.satellite.attribution })
      };

      // Determina qual camada deve ser adicionada por padrão
      const defaultLayer = mapType === 'map' ? "Mapa" : mapType === 'topology' ? "Topografia" : "Satélite";

      // Adiciona a camada padrão ao mapa
      baseLayers[defaultLayer].addTo(map);

      // Adiciona o controle de camadas, marcando a camada padrão como selecionada
      const layerControl = L.control.layers(baseLayers, null, { position: 'topright' }).addTo(map);

      // Marca a camada padrão como selecionada no controle de camadas
      Object.keys(baseLayers).forEach(layerName => {
        if (layerName === defaultLayer) {
          map.addLayer(baseLayers[layerName]);
        } else {
          map.removeLayer(baseLayers[layerName]);
        }
      });

      // Adiciona o controle de zoom no canto superior direito
      L.control.zoom({
        position: 'topright'
      }).addTo(map);

      if (geojsonString) {
        try {
          const geojson = JSON.parse(geojsonString);
          const geoJsonLayer = L.geoJSON(geojson).addTo(map);
          map.fitBounds(geoJsonLayer.getBounds());
        } catch (error) {
          console.error('Error parsing GeoJSON:', error);
        }
      }

      // Função para redimensionar o mapa
      function resizeMap() {
        map.invalidateSize();
      }

      // Redimensiona o mapa quando a janela é redimensionada
      window.addEventListener('resize', resizeMap);

      // Redimensiona o mapa após um curto atraso para garantir que todos os elementos estejam carregados
      setTimeout(resizeMap, 250);
    });
  }

  // Initialize the map when the DOM is fully loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initMap);
  } else {
    initMap();
  }
</script>
