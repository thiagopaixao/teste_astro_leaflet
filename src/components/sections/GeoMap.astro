---
interface Props {
  title: string;
  content: string;
  latitude: number;
  longitude: number;
  zoom: number;
  geojsons?: { geojson: string }[];
  id: string;
  typelayer: string;
}

const { title, content, latitude, longitude, zoom, geojsons, id, typelayer } = Astro.props;
---

<section class="relative w-full h-[600vh]">
  <div class="sticky top-0 w-full h-screen overflow-hidden">
    <div class="absolute inset-0 z-10 bg-black bg-opacity-50 flex flex-col justify-center items-center text-white p-4">
      <h2 class="text-3xl font-bold mb-4">{title}</h2>
      <div class="prose max-w-none mb-4 text-white" set:html={content} />
    </div>
    <div id={id} class="absolute inset-0 geo-map" data-latitude={latitude} data-longitude={longitude} data-zoom={zoom} data-geojsons={JSON.stringify(geojsons?.map(g => g.geojson))} data-typelayer={typelayer}></div>
  </div>
</section>

<style>
  .prose :global(*) {
    color: white;
  }
</style>

<script>
  import L from 'leaflet';

  function initMap() {
    const mapElements = document.querySelectorAll('.geo-map');
    mapElements.forEach((mapElement) => {
      if (!mapElement) return;

      const latitude = Number(mapElement.dataset.latitude);
      const longitude = Number(mapElement.dataset.longitude);
      const zoom = Number(mapElement.dataset.zoom);
      const geojsonsString = mapElement.dataset.geojsons;

      const map = L.map(mapElement.id, {
        scrollWheelZoom: false,
        dragging: false,
        zoomControl: false
      }).setView([latitude, longitude], zoom);

      const mapTypes = {
        map: {
          url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
          attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        },
        topology: {
          url: 'https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png',
          attribution: 'Map data: &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, <a href="http://viewfinderpanoramas.org">SRTM</a> | Map style: &copy; <a href="https://opentopomap.org">OpenTopoMap</a> (<a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA</a>)'
        },
        satellite: {
          url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',
          attribution: 'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'
        }
      };

      const typelayer = mapElement.dataset.typelayer || 'map';
      const selectedMapType = mapTypes[typelayer];

      L.tileLayer(selectedMapType.url, {
        attribution: selectedMapType.attribution
      }).addTo(map);

      console.log(`Map ${mapElement.id} initialized with type: ${typelayer}`);

      if (geojsonsString) {
        try {
          const geojsons = JSON.parse(geojsonsString);
          geojsons.forEach(geojsonStr => {
            const geojson = JSON.parse(geojsonStr);
            L.geoJSON(geojson).addTo(map);
          });
        } catch (error) {
          console.error('Error parsing GeoJSONs:', error);
        }
      }

      // Adiciona a animação de zoom ao rolar a página
      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const scrollY = window.scrollY;
            const sectionHeight = entry.target.offsetHeight;
            const progress = (scrollY % sectionHeight) / sectionHeight;
            const newZoom = zoom + progress * 3; // Ajuste o fator de zoom conforme necessário
            map.setZoom(newZoom);
          }
        });
      }, { threshold: 0.1 });

      observer.observe(mapElement.closest('section'));
    });
  }

  // Initialize the map when the DOM is fully loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initMap);
  } else {
    initMap();
  }
</script>
